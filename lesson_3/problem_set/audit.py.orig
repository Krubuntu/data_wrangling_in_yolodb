#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
In this problem set you work with cities infobox data, audit it, come up with a
cleaning idea and then clean it up. In the first exercise we want you to audit
the datatypes that can be found in some particular fields in the dataset.

The possible types of values can be:
- NoneType if the value is a string "NULL" or an empty string ""
- list, if the value starts with "{"
- int, if the value can be cast to int
- float, if the value can be cast to float, but CANNOT be cast to int.
   For example, '3.23e+07' should be considered a float because it can be cast
   as float but int('3.23e+07') will throw a ValueError
- 'str', for all other values

The audit_file function should return a dictionary containing fieldnames and a
SET of the types that can be found in the field. e.g.
{"field1: set([float, int, str]),
 "field2: set([str]),
  ....
}

All the data initially is a string, so you have to do some checks on the values
first.
"""
import sys
import codecs
import csv
import json
import pprint
import re

CITIES = 'cities.csv'

FIELDS = ["name", "timeZone_label", "utcOffset", "homepage", "governmentType_label", "isPartOf_label", "areaCode",
          "populationTotal", "elevation", "maximumElevation", "minimumElevation", "populationDensity", "wgs84_pos#lat",
          "wgs84_pos#long", "areaLand", "areaMetro", "areaUrban"]

URI_PATTERN = re.compile("^URI")
W3_PATTERN = re.compile("^http://www.w3.org")


def castable(input_string, input_type):
    '''
    Function to check the ability convert input_string into input_type via cast.

    :param input_string: String containing the value we wish to attempt casting.
    :param input_type: Targeted type into which we wish to cast.
    :return: True or False, depending on ability to cast input_string into input_type's type.
    '''
    try:
        return isinstance(input_type(input_string), input_type)
    except ValueError:
        return False


def audit_row(input_string):
    '''
    Function to audit rows in input file and assess the type of field values.

    :param input_string:
    :return: We return actual "types," not strings representing types:
            'list', NoneType, 'int', 'float', or catchall 'str.'
    '''
    if input_string.startswith("{"):
        return list
    elif len(input_string) == 0 or input_string == "NULL":
        # We use type(None) since it does not appear possible to 'return NoneType'
        return type(None)
    elif castable(input_string, float):
        if castable(input_string, int):
            return int
        else:
            return float
    else:
        return str


def audit_file(filename, fields):
    fieldtypes = dict()
    # We create an empty set for each field proactively, before looping.
    for field in FIELDS:
        fieldtypes[field] = set()

    # YOUR CODE HERE
    with open(filename, "r") as input_file:
        reader = csv.DictReader(input_file)
        header = reader.fieldnames

        for row in reader:
            if re.match(URI_PATTERN, row['URI']):
<<<<<<< HEAD
                print("BAD URI: {}".format(row['URI']))
                continue
            elif re.match(W3_PATTERN, row['URI']):
                print("BAD W3 URI: {}".format(row['URI']))
=======
                #print("BAD URI: {}".format(row['URI']))
                continue
            elif re.match(W3_PATTERN, row['URI']):
                #print("BAD W3 URI: {}".format(row['URI']))
>>>>>>> Added re module, two patterns to check for raw 'URI' and W3 URI patterns, added function commentary and conditional logic to audit_file.
                continue
            else:
                for field in FIELDS:
                    # Call audit_row
                    row_type_audit = audit_row(row[field])
                    # Add the type we find to appropriate set. Syntax non-intuitive
                    fieldtypes[field].add(row_type_audit)

    return fieldtypes


def test():
    fieldtypes = audit_file(CITIES, FIELDS)

<<<<<<< HEAD
    pprint.pprint(fieldtypes["areaLand"])

    pprint.pprint(fieldtypes["areaMetro"])
=======
    #pprint.pprint(fieldtypes["areaLand"])
    #pprint.pprint(fieldtypes["areaMetro"])
>>>>>>> Added re module, two patterns to check for raw 'URI' and W3 URI patterns, added function commentary and conditional logic to audit_file.

    assert fieldtypes["areaLand"] == set([type(1.1), type([]), type(None)])
    assert fieldtypes['areaMetro'] == set([type(1.1), type(None)])


if __name__ == "__main__":
    test()
